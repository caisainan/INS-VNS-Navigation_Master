%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 开始日期：2013.12.5
% 作者：xyz
% 功能：纯视觉实验程序：基于最小平方中值定理的视觉里程计，针对实验数据
% 源于白师姐的程序“VO_LMedS_LM”
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function  [VisualRT,VOResult] = VONavLM_Exp(visualInputData,trueTrace)

%% 导入数据
%% 真实轨迹的两个参数
position = trueTrace.position;
attitude = trueTrace.attitude;
%% 相机标定的10个参数
[cameraCalibName,cameraCalibPath] = uigetfile('.mat','选择相机标定数据');
cameraCalib = importdata([cameraCalibPath,cameraCalibName]); 
T = cameraCalib.T;
alpha_c_left = cameraCalib.alpha_c_left;
alpha_c_right = cameraCalib.alpha_c_right;
cc_left = cameraCalib.cc_left;
cc_right = cameraCalib.cc_right;
fc_left = cameraCalib.fc_left;
fc_right = cameraCalib.fc_right;
kc_left = cameraCalib.kc_left;
kc_right = cameraCalib.kc_right;
om = cameraCalib.om;
%% 视觉图像的特征点信息

%% 常值参数
% camera parameter
f = 0.008;                     % focal distance
B = 0.2;                       % baseline lenth
m = 1040;
n = 1392;
u0 = n/2;
v0 = m/2;
dx = 4.65e-6;
dy = 4.65e-6;
ax = f/dx;
ay = f/dy;
% fl = 1791.08963;
% fr = 1773.16202;
flx = 1789.81846;  % 1791.32418;        % ？？？
fly = 1792.24518;  % 1790.85508;
frx = 1771.86989;  % 1772.67638;
% omc = [ 0.00453   -0.02001  0.01035 ];  % [0.00532   -0.01474  0.00985];
% Tlr = [ -200.75804   -1.72567  0.85463 ]/1000;  % [ -211.58026   -2.38005  2.21846 ]/1000;
omc = om;   % 相机标定参数？
Tlr = T'/1000;
% Rlr = FCbn(omc);
Rlr = rodrigues(omc);   % 右相机到左相机的转移矩阵？
lu0 = 638.03785;  % 637.22511;  % ？？？
lv0 = 519.94005;  % 527.62585;
ru0 = 696.05540;  % 690.96750;
rv0 = 535.54729;  % 543.80462;

count = size(visualInputData,2);
Rot = zeros(3,3,count);  % whole rotation 
Trs = zeros(3,1,count);  % whole translation
Rbb = zeros(3,3,count);
Tbb = zeros(3,count);
sm = 100;   % the number of Monte Carlo sample
q = 3;   % the number of matching point for each sample
R = zeros(3,3,sm);
T = zeros(3,1,sm);
Median = zeros(1,sm);
S = diag([1,1,-1]);
spixel = cell(1,count);

% navigation parameter in world frame
VOsta = zeros(3,count+1);
VOpos = zeros(3,count+1);
VOvel = zeros(3,count+1);
Rk = zeros(6,6,count); % 误差协方差
RELMOV = zeros(7,count);
qRk = zeros(7,7,count); % 误差协方差
VOpos(:,1) = [0;0;-30*pi/180];

%初始姿态误差
dinit_att = [0/3600/180*pi;0/3600/180*pi;0/3600/180*pi];

% initial condition
% pose0 = [0;0;0] + dinit_att;
pose0 = position(:,1) + dinit_att;
Cbr=FCbn(pose0);
Crb=Cbr';
VOfre = 1/10;  % Hz
% install information
Cbc = [1, 0, 0;
       0, 0,-1;
       0, 1, 0];
Ccb = Cbc';

% 显示进度条
h = waitbar(0,'Please wait...');
steps = count;

for i = 1:count
   %% 三维重建
   % Three-dimension restruction to get dots' position in world coordinate 
   P1 = zeros(size(visualInputData{i}.leftLocCurrent,1),3);    % store position information in previous time
   P2 = zeros(size(visualInputData{i}.leftLocNext,1),3);    % store position information in present time
   N = size(visualInputData{i}.leftLocCurrent,1);    % the number of features
%    for j = 1:N
%        P1(j,1) = B * (visualInputData{i}.leftLocCurrent(j,2) - u0) / (visualInputData{i}.leftLocCurrent(j,2) - visualInputData{i}.rightLocCurrent(j,2));               % X
%        P1(j,2) = B * ax * (visualInputData{i}.leftLocCurrent(j,1) - v0) / (ay * (visualInputData{i}.leftLocCurrent(j,2) - visualInputData{i}.rightLocCurrent(j,2)));   % Y
%        P1(j,3) = B * ax / (visualInputData{i}.leftLocCurrent(j,2) - visualInputData{i}.rightLocCurrent(j,2));                                       % Z
%        P2(j,1) = B * (visualInputData{i}.leftLocNext(j,2) - u0) / (visualInputData{i}.leftLocNext(j,2) - visualInputData{i}.rightLocNext(j,2));               % X
%        P2(j,2) = B * ax * (visualInputData{i}.leftLocNext(j,1) - v0) / (ay * (visualInputData{i}.leftLocNext(j,2) - visualInputData{i}.rightLocNext(j,2)));   % Y
%        P2(j,3) = B * ax / (visualInputData{i}.leftLocNext(j,2) - visualInputData{i}.rightLocNext(j,2));                                       % Z
%    end
    for j = 1:N
%         P1(j,3) = fl * (fr*Tlr(1) - (visualInputData{i}.rightLocCurrent(j,2) - ru0)*Tlr(3)) / ((visualInputData{i}.rightLocCurrent(j,2) - ru0)*(Rlr(3,1)*(visualInputData{i}.leftLocCurrent(j,2) - lu0)...
%                 + Rlr(3,2)*(visualInputData{i}.leftLocCurrent(j,1) - lv0) + fl*Rlr(3,3)) - fr*(Rlr(1,1)*(visualInputData{i}.leftLocCurrent(j,2) - lu0) + Rlr(1,2)*(visualInputData{i}.leftLocCurrent(j,1) - lv0) + fl*Rlr(1,3)));
%         P1(j,3) = (frx*Tlr(1) - (visualInputData{i}.rightLocCurrent(j,2) - ru0)*Tlr(3)) / ((visualInputData{i}.rightLocCurrent(j,2) - ru0)*(Rlr(3,1)*(visualInputData{i}.leftLocCurrent(j,2) - lu0)/flx...
%                   + Rlr(3,2)*(visualInputData{i}.leftLocCurrent(j,1) - lv0)/fly + Rlr(3,3)) - frx*(Rlr(1,1)*(visualInputData{i}.leftLocCurrent(j,2) - lu0)/flx + Rlr(1,2)*(visualInputData{i}.leftLocCurrent(j,1) - lv0)/fly + Rlr(1,3)));
%         P1(j,1) = P1(j,3) * (visualInputData{i}.leftLocCurrent(j,2) - lu0) / flx;
%         P1(j,2) = P1(j,3) * (visualInputData{i}.leftLocCurrent(j,1) - lv0) / fly;
          xL = [visualInputData{i}.leftLocCurrent(j,2);visualInputData{i}.leftLocCurrent(j,1)];
          xR = [visualInputData{i}.rightLocCurrent(j,2);visualInputData{i}.rightLocCurrent(j,1)];
          [P1(j,:),~] = stereo_triangulation(xL,xR,omc,Tlr,fc_left,cc_left,kc_left,alpha_c_left,fc_right,cc_right,kc_right,alpha_c_right);
%         P2(j,3) = fl * (fr*Tlr(1) - (visualInputData{i}.rightLocNext(j,2) - ru0)*Tlr(3)) / ((visualInputData{i}.rightLocNext(j,2) - ru0)*(Rlr(3,1)*(visualInputData{i}.leftLocNext(j,2) - lu0)...
%                 + Rlr(3,2)*(visualInputData{i}.leftLocNext(j,1) - lv0) + fl*Rlr(3,3)) - fr*(Rlr(1,1)*(visualInputData{i}.leftLocNext(j,2) - lu0) + Rlr(1,2)*(visualInputData{i}.leftLocNext(j,1) - lv0) + fl*Rlr(1,3)));
%         P2(j,3) = (frx*Tlr(1) - (visualInputData{i}.rightLocNext(j,2) - ru0)*Tlr(3)) / ((visualInputData{i}.rightLocNext(j,2) - ru0)*(Rlr(3,1)*(visualInputData{i}.leftLocNext(j,2) - lu0)/flx...
%                   + Rlr(3,2)*(visualInputData{i}.leftLocNext(j,1) - lv0)/fly + Rlr(3,3)) - frx*(Rlr(1,1)*(visualInputData{i}.leftLocNext(j,2) - lu0)/flx + Rlr(1,2)*(visualInputData{i}.leftLocNext(j,1) - lv0)/fly + Rlr(1,3)));
%         P2(j,1) = P2(j,3) * (visualInputData{i}.leftLocNext(j,2) - lu0) / flx;
%         P2(j,2) = P2(j,3) * (visualInputData{i}.leftLocNext(j,1) - lv0) / fly;
          xL = [visualInputData{i}.leftLocNext(j,2);visualInputData{i}.leftLocNext(j,1)];
          xR = [visualInputData{i}.rightLocNext(j,2);visualInputData{i}.rightLocNext(j,1)];
          [P2(j,:),~] = stereo_triangulation(xL,xR,omc,Tlr,fc_left,cc_left,kc_left,alpha_c_left,fc_right,cc_right,kc_right,alpha_c_right);
    end
    %% 运动估计
   % Motion estimation to get coordinate translate matrix: LMedS
   for j = 1:sm
       ind = randi(N,1,q);
       % SVD method
       M0 = zeros(3,1);
       M1 = zeros(3,1);
       for k = 1:q
           M0 = M0 + P1(ind(k),:)';
           M1 = M1 + P2(ind(k),:)';
       end
       M0 = M0 / q;
       M1 = M1 / q;
       Pset0 = zeros(3,q);
       Pset1 = zeros(3,q);
       for k = 1:q
           Pset0(:,k) = P1(ind(k),:)' - M0;
           Pset1(:,k) = P2(ind(k),:)' - M1;
       end
       Q = Pset1*Pset0'/q;
       [U,~,V] = svd(Q);
       if abs(det(U)*det(V)-1) < 1e-10
           Rcc = U*V';
       elseif abs(det(U)*det(V)+1) < 1e-10
           Rcc = U*S*V';
       end
       Tcc = M1 - Rcc * M0;
       R(:,:,j) = Rcc;
       T(:,:,j) = Tcc;
       % compute regression variance and find Median
       r = zeros(1,N);
       for k = 1:N
           r(k) = norm(P2(k,:)' - (Rcc * P1(k,:)' + Tcc));
       end
%        rr = isnan(r);
%        indexr =  rr == 1;
%        r(indexr) = Inf;
       Median(j) = median(r);
   end
   
   % find the minimum Median
   mMed = min(Median);
   ord = find( Median == min(Median));
   Rcc = R(:,:,ord(1));
   Tcc = T(:,:,ord(1));
   
   % compute robust standrad deviation
   sigma = 1.4826 * (1 + 5 / (N - q)) * sqrt(mMed);
   % exstract matching point
   P1new = zeros(3,size(visualInputData{i}.leftLocCurrent,1));
   P2new = zeros(3,size(visualInputData{i}.leftLocNext,1));
   leftLocCurrent = zeros(size(visualInputData{i}.leftLocCurrent,1),2);
   rightLocCurrent = zeros(size(visualInputData{i}.leftLocCurrent,1),2);
   leftLocNext = zeros(size(visualInputData{i}.leftLocNext,1),2);
   rightLocNext = zeros(size(visualInputData{i}.leftLocNext,1),2);
   enum = 0;
   for j = 1:N
       res = norm(P2(j,:)' - (Rcc * P1(j,:)' + Tcc));
       if res ^ 2 <= (2.5 * sigma) ^ 2
           enum = enum + 1;
           P1new(:,enum) = P1(j,:)';
           P2new(:,enum) = P2(j,:)';
           leftLocCurrent(enum,:) = visualInputData{i}.leftLocCurrent(j,:);
           rightLocCurrent(enum,:) = visualInputData{i}.rightLocCurrent(j,:);
           leftLocNext(enum,:) = visualInputData{i}.leftLocNext(j,:);
           rightLocNext(enum,:) = visualInputData{i}.rightLocNext(j,:);
       end
   end
   % 选取残差最小的20个点
%    res = zeros(1,N);
%    for j = 1:N
%        res(j) = norm(P2(j,:)' - (Rcc * P1(j,:)' + Tcc));
%    end
%    [vals,indx] = sort(res);
%    for enum = 1:20
%        P1new(:,enum) = P1(indx(enum),:)';
%        P2new(:,enum) = P2(indx(enum),:)';
%        leftLocCurrent(enum,:) = visualInputData{i}.leftLocCurrent(indx(enum),:);
%        rightLocCurrent(enum,:) = visualInputData{i}.rightLocCurrent(indx(enum),:);
%        leftLocNext(enum,:) = visualInputData{i}.leftLocNext(indx(enum),:);
%        rightLocNext(enum,:) = visualInputData{i}.rightLocNext(indx(enum),:);
%    end
   P1new(:,enum+1:N) = [];
   P2new(:,enum+1:N) = [];
   leftLocCurrent(enum+1:N,:) = [];
   rightLocCurrent(enum+1:N,:) = [];
   leftLocNext(enum+1:N,:) = [];
   rightLocNext(enum+1:N,:) = [];
   spixel{i}.leftLocCurrent = leftLocCurrent;
   spixel{i}.rightLocCurrent = rightLocCurrent;
   spixel{i}.leftLocNext = leftLocNext;
   spixel{i}.rightLocNext = rightLocNext;
   % SVD method to get the final motion estimation (R,T)
   M0 = zeros(3,1);
   M1 = zeros(3,1);
   for k = 1:enum
       M0 = M0 + P1new(:,k);
       M1 = M1 + P2new(:,k);
   end
   M0 = M0 / enum;
   M1 = M1 / enum;
   Pset0 = zeros(3,enum);
   Pset1 = zeros(3,enum);
   for k = 1:enum
       Pset0(:,k) = P1new(:,k) - M0;
       Pset1(:,k) = P2new(:,k) - M1;
   end
   Q = Pset1*Pset0'/enum;
   [U,D,V] = svd(Q);
   if abs(det(U)*det(V)-1) < 1e-10
       Rcc = U*V';
   elseif abs(det(U)*det(V)+1) < 1e-10
       Rcc = U*S*V';
   end
   Tcc = M1 - Rcc * M0;
   % 根据姿态矩阵Rcc计算姿态四元数
   q1=1/2*sqrt(abs(1+Rcc(1,1)-Rcc(2,2)-Rcc(3,3)));
   q2=1/2*sqrt(abs(1-Rcc(1,1)+Rcc(2,2)-Rcc(3,3)));
   q3=1/2*sqrt(abs(1-Rcc(1,1)-Rcc(2,2)+Rcc(3,3)));
   q0=sqrt(abs(1-q1^2-q2^2-q3^2));
   if Rcc(2,3)-Rcc(3,2)<0
       q1=-q1;
   end
   if Rcc(3,1)-Rcc(1,3)<0
       q2=-q2;
   end
   if Rcc(1,2)-Rcc(2,1)<0
       q3=-q3;
   end
   Q0=[q0;q1;q2;q3];
   Q0=Q0/norm(Q0);
   X = LMalgorithm1(P2new,P1new,Q0,Tcc);
   
   Rcc = [X(1)^2+X(2)^2-X(3)^2-X(4)^2,    2*(X(2)*X(3)+X(1)*X(4)),        2*(X(2)*X(4)-X(1)*X(3));
         2*(X(2)*X(3)-X(1)*X(4)),    X(1)*X(1)-X(2)*X(2)+X(3)*X(3)-X(4)*X(4),    2*(X(3)*X(4)+X(1)*X(2));
         2*(X(2)*X(4)+X(1)*X(3)),        2*(X(3)*X(4)-X(1)*X(2)),    X(1)*X(1)-X(2)*X(2)-X(3)*X(3)+X(4)*X(4)];
   Tcc = X(5:7);
   Rot(:,:,i) = Rcc;
   Trs(:,:,i) = Tcc;
   % 计算重投影误差目标函数的Jacobi矩阵
   % 以计算相对运动参数的误差协方差矩阵
   Rbb(:,:,i) = Ccb * Rcc * Cbc; % Rbb
   Tbb(:,i) = Ccb * Tcc;
   % 计算量测噪声方差阵
    % 计算姿态角
    pos(1) = asin(Rbb(2,3,i));  % 俯仰角  
    if Rbb(3,3,i)>0
        pos(2)=atan(-Rbb(1,3,i)/Rbb(3,3,i)); % roll
    elseif Rbb(3,3,i)<0
        if Rbb(1,3,i)>0
            pos(2)=pos(2)-pi;
        else
            pos(2)=pos(2)+pi;
        end
    elseif Rbb(3,3,i)==0
        if Rbb(1,3,i)>0
            pos(2)=-pi/2;
        else
            pos(2)=1/2*pi;
        end
    end
    if Rbb(2,2,i)>0   % 航向角
        if Rbb(2,1,i)>=0
            pos(3) = atan(-Rbb(2,1,i)/Rbb(2,2,i)); % + 2 * pi
        elseif Rbb(2,1,i)<0
            pos(3) = atan(-Rbb(2,1,i)/Rbb(2,2,i));
        end
    elseif Rbb(2,2,i)<0
        pos(3) = pi + atan(-Rbb(2,1,i)/Rbb(2,2,i));
    elseif Rbb(2,2,i)==0
        if Rbb(2,1,i)>0
            pos(3) = 1.5 * pi;
        elseif Rbb(2,1)<0
            pos(3) = pi / 2;
        end
    end
%     Rk(:,:,i) = R_covEuler(P1new,pos);
    Rk(:,:,i) = R_covEuler1(P2new,P1new,Rbb(:,:,i),pos,Tbb(:,i));

   % 计算量测噪声方差阵
   % 根据姿态矩阵Rbb计算姿态四元数
   q1=1/2*sqrt(abs(1+Rbb(1,1,i)-Rbb(2,2,i)-Rbb(3,3,i)));
   q2=1/2*sqrt(abs(1-Rbb(1,1,i)+Rbb(2,2,i)-Rbb(3,3,i)));
   q3=1/2*sqrt(abs(1-Rbb(1,1,i)-Rbb(2,2,i)+Rbb(3,3,i)));
   q0=sqrt(abs(1-q1^2-q2^2-q3^2));
   if Rbb(2,3,i)-Rbb(3,2,i)<0
       q1=-q1;
   end
   if Rbb(3,1,i)-Rbb(1,3,i)<0
       q2=-q2;
   end
   if Rbb(1,2,i)-Rbb(2,1,i)<0
       q3=-q3;
   end
   Q0=[q0;q1;q2;q3];
   Q0=Q0/norm(Q0);
%    Rk(:,:,i) = R_cov1(P1new,Q0);
   qRk(:,:,i) = R_cov2(P2new,P1new,Q0,Rbb(:,:,i),Tbb(:,i));
   RELMOV(:,i) = [Q0;Tbb(:,i)];
   
   waitbar(i/steps,h);
end
close(h);
% save('spixel.mat','spixel');

% compute the path -- in local level coordinate
pos = zeros(3,count+1);
for i = 1:count
%     Rbb(:,:,i) = Ccb * Rot(:,:,i) * Cbc;
%     Tbb(:,i) = Ccb * Trs(:,:,i);
    Crb = Rbb(:,:,i) * Crb;
    VOsta(:,i+1) = VOsta(:,i) - Crb' * Tbb(:,i);
    VOvel(:,i+1) = (VOsta(:,i+1) - VOsta(:,i)) * VOfre;
    VOpos(1,i+1) = asin(Crb(2,3));  % 俯仰角  
    if Crb(3,3)>0
        VOpos(2,i+1)=atan(-Crb(1,3)/Crb(3,3)); % roll
    elseif Crb(3,3)<0
        if Crb(1,3)>0
            VOpos(2,i+1)=VOpos(2,i+1)-pi;
        else
            VOpos(2,i+1)=VOpos(2,i+1)+pi;
        end
    elseif Crb(3,3)==0
        if Crb(1,3)>0
            VOpos(2,i+1)=-pi/2;
        else
            VOpos(2,i+1)=1/2*pi;
        end
    end
    if Crb(2,2)>0   % 航向角
        if Crb(2,1)>0
            VOpos(3,i+1) = atan(-Crb(2,1)/Crb(2,2)); % + 2 * pi
        elseif Crb(2,1)<0
            VOpos(3,i+1) = atan(-Crb(2,1)/Crb(2,2));
        end
    elseif Crb(2,2)<0
        if Crb(2,1) > 0
            VOpos(3,i+1) = - pi + atan(-Crb(2,1)/Crb(2,2));
        elseif Crb(2,1) < 0
            VOpos(3,i+1) = pi + atan(-Crb(2,1)/Crb(2,2));
        end
    elseif Crb(2,2)==0
        if Crb(2,1)>0
            VOpos(3,i+1) = 1.5 * pi;
        elseif Crb(2,1)<0
            VOpos(3,i+1) = pi / 2;
        end
    end
%     if Crb(2,2)>0   % 航向角
%         if Crb(2,1)>=0
%             VOpos(3,i+1) = -atan(-Crb(2,1)/Crb(2,2));
%         elseif Crb(2,1)<0
%             VOpos(3,i+1) = -atan(-Crb(2,1)/Crb(2,2));
%         end
%     elseif Crb(2,2)<0
%         if Crb(2,1) >= 0
%             VOpos(3,i+1) = -(atan(-Crb(2,1)/Crb(2,2)) - pi);
%         elseif Crb(2,1) < 0
%             VOpos(3,i+1) = -(atan(-Crb(2,1)/Crb(2,2)) + pi);
%         end
%     elseif Crb(2,2)==0
%         if Crb(2,1)>0
%             VOpos(3,i+1) = pi / 2;
%         elseif Crb(2,1)<0
%             VOpos(3,i+1) = - pi / 2;
%         end
%     end
end

%% 输出

VisualRT.Rbb = Rbb ;
VisualRT.Tbb = Tbb ;

VOResult.VOPosition = VOsta ;
VOResult.VOAttitude = VOpos ;
VOResult.VOVelocity = VOvel ;

save([pwd,'\VONavResult\VOResult.mat'],'VOResult')
assignin()

% t = zeros(1,count+1);
% truth = 0:0.3:6.0;
% figure;
% plot(VOsta(1,:),VOsta(2,:),'bo-');
% hold on;
% plot(t,truth,'r.-');
% xlabel('横向位置/m');
% ylabel('行进方向位移/m');
% axis([-1 1 0 7]);
% legend('视觉里程计','真实轨迹');

% 保存数据
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\iVOtraceline30m.mat','VOpos','VOsta','VOvel');
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\RTline30m.mat','Rbb','Tbb');
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\Rkline30m.mat','Rk');
% % save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\result_mean\test\pixelline38m.mat','pl','pr');
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\QTline30m.mat','RELMOV');
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\qRkline30m.mat','qRk');
% save('F:\INS_Vision program\INS_VNS_correct\Experiment_Data\0724\spixel.mat','spixel');
% 
% runtime = size(attitude,2);
% INSfre = 100;
% VOfre = 1/10;
% ratio = INSfre/VOfre;
% truth = attitude(1:2,1:ratio:runtime);
% % truth=[zeros(1,128);0:0.3:38.1];
% figure;
% plot(VOsta(1,:),VOsta(2,:),'bo-',truth(1,:),truth(2,:),'r.:');
% xlabel('横向位置/m');
% ylabel('行进方向位移/m');
% legend('视觉里程计','真实轨迹');
% 
% VNS_dpos = norm(VOsta(1:2,count+1)-attitude(1:2,runtime))%#ok<NOPTS>
% VNS_dpos_percent = VNS_dpos / (0.3 * count)%#ok<NOPTS>
% 
% time=zeros(1,count+1);
% for i=1:count+1
%     time(i)=(i-1)/VOfre/60;
% end
% 
% figure;
% plot(time,sqrt((VOsta(1,:)-attitude(1,1:INSfre/VOfre:runtime)).^2+(VOsta(2,:)-attitude(2,1:INSfre/VOfre:runtime)).^2),'b-');
% title('月球车位置误差','fontsize',16);
% xlabel('时间/min');ylabel('m');
% 
% figure;
% title('三轴姿态误差','fontsize',16);
% subplot(3,1,1);
% plot(time,(VOpos(1,:) - position(1,1:INSfre/VOfre:runtime))*180/pi*3600,'r--');
% xlabel('时间(min)','fontsize',12);
% ylabel('俯仰角/″','fontsize',12);
% subplot(3,1,2);
% plot(time,(VOpos(2,:) - position(2,1:INSfre/VOfre:runtime))*180/pi*3600,'r--');
% xlabel('时间(min)','fontsize',12);
% ylabel('横滚角/″','fontsize',12);
% subplot(3,1,3);
% plot(time,(VOpos(3,:) - position(3,1:INSfre/VOfre:runtime))*180/pi*3600,'r--');
% xlabel('时间(min)','fontsize',12);
% ylabel('航向角/″','fontsize',12);
% 
% 
% % compute the path -- in earth coordinate
% posrn = zeros(3,count+1);
% poscn = zeros(3,count+1);
% % posre = zeros(3,count+1);
% % posce = zeros(3,count+1);
% posrn(:,1) = [116.2081062047672*pi/180;39.58746562328907*pi/180;20]; % initial position: lon lat h
% poscn(:,1) = [116.2081062047672*pi/180;39.58746562328907*pi/180;20];
% % posre(:,1) = Fdtoe(posrn(:,1));
% % posce(:,1) = Fdtoe(poscn(:,1));
% % att = [0;0;pi/2+pi/16];
% % Cbn=FCbn(att);
% % Cnb=Cbn';
% % Cen=FCen(posrn(1,1),posrn(2,1)); 
% % Cne=Cen';
% % Ceb = Cnb*Cen;
% % Cbe = Ceb';
% Treal = [0;0;0.2];
% % for i = 2:count+1
% %     Cbe = Cbe*Rot(:,:,i-1)';
% %     Cber = Cbe*eye(3);
% %     posce(:,i) = posce(:,i-1) - Cbe*Trs(:,:,i-1);
% %     posre(:,i) = posre(:,i-1) - Cber*Treal;
% %     poscn(:,i) = Fetod(posce(:,i));
% %     posrn(:,i) = Fetod(posre(:,i));
% % end
% 
% % compute the path -- in local coordinate
% Re = 6378245;
% e = 1.0 / 298.3;
% Ryt = Re*(1-2*e+3*e*sin(posrn(2,1))^2)+posrn(3,1);
% Rx = Re*cos(posrn(2,1));
% for i = 2:count+1
%     poscn(1,i) = poscn(1,i-1) + (pos(3,i) - pos(3,i-1))/Rx;
%     poscn(2,i) = poscn(2,1) + pos(1,i)/Ryt;
%     posrn(1,i) = posrn(1,i-1) + Treal(3)/Rx;
%     posrn(2,i) = posrn(2,i-1) + Treal(1)/Ryt;
% end
% % figure;
% % plot(posrn(1,:)*180/pi,posrn(2,:)*180/pi,poscn(1,:)*180/pi,poscn(2,:)*180/pi,'r');
% % title('月球车轨迹VO','fontsize',16);
% % xlabel('经度(d)','fontsize',12);
% % ylabel('纬度(d)','fontsize',12);
% % legend('真实轨迹','计算轨迹');
% 
% 


