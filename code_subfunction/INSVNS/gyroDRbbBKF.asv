%% DRbb标定陀螺常值漂移法B：Rbb相乘
function [gyroDriftEsmB_new,P_gyroDRbbKFB_new] = gyroDRbbBUKF(R_INS,R_VNS,T,gyroDriftEsmB_old,P_gyroDRbbKFB_old,Q_gyroDRbbKFB,R_gyroDRbbKFB,Wnbb)

dR = R_INS*R_VNS' ;
Z_gyroDRbbB = [ (DR(3,2)-DR(2,3));(DR(1,3)-DR(3,1));(DR(2,1)-DR(1,2))]/(2*T) ;
Z_gyroDRbbB = FCnbtoQ(R_INS*R_VNS') ;

Fai = eye(3);
[IX1,IPU1] = UKF(gyroDriftEsmB_old,P_gyroDRbbKFB_old,Q_gyroDRbbKFB,R_gyroDRbbKFB,IZ,station(1:2,t),Fai,3,-3,0,Wnbb);


function Zpre_gyroDRbbB = hfun_DRbbB(gyroDrift,T,Wnbb)
%% 由状态计算量测
OWnbb = GetCnbVelcity(Wnbb) ;   % Wnbb对应的姿态转移矩阵变化率
DR = eye(3)-GetCnbVelcity(gyroDrift)*T-()

function CnbV = GetCnbVelcity(Wnbb)
%% 由角速率计算姿态转移矩阵变化率
CnbV = [        0       -Wnbb(3)    Wnbb(2)
            Wnbb(3)         0       -Wnbb(1)
            -Wnbb(2)    Wnbb(1)        0   ];

function [Xe,Pe]=UKF(X0,P0,Q,R,Z,station,Fai,nn,mn,tao,Wnbb)
% station：
% Fai：
% nn： 状态维数
% mn
% tao：


% CNS UKF
if(det(P0)>0)
    U=chol(P0);
else
    U=chol(P0+eye(nn,nn)*1e-3);
end


% cakculate sigma point
Vp=zeros(nn,nn);
Vn=zeros(nn,nn);

V0=X0;
for n=1:nn
    Vp(:,n)=V0+sqrt(nn+tao)*U(n,:)';
end
for n=1:nn
    Vn(:,n)=V0-sqrt(nn+tao)*U(n,:)';
end

% Time update
Xp=zeros(nn,nn);
Xn=zeros(nn,nn);

Xm=Fai*V0;
for n=1:nn
    tempx=Fai*Vp(:,n);
    Xp(:,n)=tempx;
end
for n=1:nn
    tempx=Fai*Vn(:,n);
    Xn(:,n)=tempx;
end

w0=tao/(nn+tao);
X10=w0*Xm;
for n=1:nn
    wp=1/(2*(nn+tao));
    X10=X10+Xp(:,n)*wp;
end
for n=1:nn
    wn=1/(2*(nn+tao));
    X10=X10+Xn(:,n)*wn;
end

P10=(Xm-X10)*(Xm-X10)'*w0+Q;
for n=1:nn
    P10=P10+(Xp(:,n)-X10)*(Xp(:,n)-X10)'*wp+Q;
end
for n=1:nn
    P10=P10+(Xn(:,n)-X10)*(Xn(:,n)-X10)'*wn+Q;
end


yp=zeros(6,nn);
yn=zeros(6,nn);
ym=hfun(Xm,station);
Z1=w0*ym;
for n=1:nn
    yp(:,n)=hfun(Xp(:,n),station);
    Z1=Z1+yp(:,n)*wp;
end
for n=1:nn
    yn(:,n)=hfun(Xn(:,n),station);
    Z1=Z1+yn(:,n)*wn;
end


% Measurement update equations
Pyy=w0*(ym-Z1)*(ym-Z1)'+R;
for n=1:nn
    Pyy=Pyy+(yp(:,n)-Z1)*(yp(:,n)-Z1)'*wp;
end
for n=1:nn
    Pyy=Pyy+(yn(:,n)-Z1)*(yn(:,n)-Z1)'*wn;
end
Pxy=w0*(Xm-X10)*(ym-Z1)';
for n=1:nn
    Pxy=Pxy+(Xp(:,n)-X10)*(yp(:,n)-Z1)'*wp;
end
for n=1:nn
    Pxy=Pxy+(Xn(:,n)-X10)*(yn(:,n)-Z1)'*wn;
end
Kk=Pxy/Pyy;
Xe=X10+Kk*(Z-Z1);
Pe=P10-Kk*Pyy*Kk';